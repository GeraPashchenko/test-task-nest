on:
  push:
    branches:
      - main

jobs:
  # build:
  #   environment: dev
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Log in to Docker Hub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     - name: Build Docker image
  #       run: docker build -t myapp:latest .

  #     - name: Tag Docker image
  #       run: docker tag myapp:latest 36889/myapp:latest

  #     - name: Push Docker image to Docker Hub
  #       run: docker push 36889/myapp:latest

  deploy:
    runs-on: ubuntu-latest
    # needs: build
    environment: dev

    steps:
      # - name: Echo credentials (sanity check)
      #   run: |
      #     echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
      #     echo "EC2_USER: ${{ secrets.EC2_USER }}"
      #     echo "EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}" | head -c 30  # Echo only the first 30 characters for verification

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Install Git if not already installed
          if ! command -v git &> /dev/null; then
            sudo yum install -y git  # For Amazon Linux and RHEL-based distros
            # OR use the following for Ubuntu-based distros
            # sudo apt-get update && sudo apt-get install -y git
          fi
          
          # Verify installations
          docker --version
          docker-compose --version
          git --version
          
          # Use a directory inside your home folder for cloning the repo
          REPO_DIR="$HOME/test-task-nest" # Adjust this path as necessary
          if [ ! -d "$REPO_DIR" ]; then
            git clone https://github.com/GeraPashchenko/test-task-nest.git "$REPO_DIR"
          fi
          
          # Change to the repository directory
          cd "$REPO_DIR" || exit
          
          # Change to the repository directory
          cd $REPO_DIR || exit
          
          # Check current directory and list files
          echo "Current directory:"
          pwd
          echo "Files in directory:"
          ls -al

          # Create .env file
          if [ ! -f "$ENV_FILE" ]; then
            echo "Creating .env file..."
          
            # Application env vars
            echo "NODE_ENV=${{ vars.NODE_ENV }}" >> "$ENV_FILE"
            echo "PORT=${{ vars.PORT }}" >> "$ENV_FILE"
            echo "THROTTLE_LIMIT=${{ vars.THROTTLE_LIMIT }}" >> "$ENV_FILE"
            echo "THROTTLE_TTL=${{ vars.THROTTLE_TTL }}" >> "$ENV_FILE"
          
            # Postgres
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> "$ENV_FILE"
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> "$ENV_FILE"
            echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> "$ENV_FILE"
            echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> "$ENV_FILE"
            echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" >> "$ENV_FILE"
          
            # MongoDB
            echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> "$ENV_FILE"
            echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> "$ENV_FILE"
            echo "MONGO_EXPRESS_USERNAME=${{ secrets.MONGO_EXPRESS_USERNAME }}" >> "$ENV_FILE"
            echo "MONGO_EXPRESS_PASSWORD=${{ secrets.MONGO_EXPRESS_PASSWORD }}" >> "$ENV_FILE"
            
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> "$ENV_FILE"
          
            echo ".env file created successfully."
          else
            echo ".env file already exists."
          fi
          
          # Run Docker Compose commands
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker-compose down
          docker-compose up -d
  
